{
	"info": {
		"_postman_id": "3a5dcd19-a774-4fbe-8f2c-c8db0d170e12",
		"name": "WEare - Postman API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28723998",
		"_collection_link": "https://lunar-star-43854.postman.co/workspace/TheFinalProject~6080e7a0-32b6-4b6d-935d-1589d5c3c169/collection/28764946-3a5dcd19-a774-4fbe-8f2c-c8db0d170e12?action=share&source=collection_link&creator=28723998"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "User registration (FPW-233)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = pm.response.text()\r",
									"\r",
									" pm.test(\"Response body contains id\", ()=>{\r",
									"     pm.expect(resp).to.include(\"id\");\r",
									" })\r",
									"\r",
									"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
									"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
									"\r",
									"console.log(resp.split(\" \")[3]); //username\r",
									"console.log(resp.split(\" \")[6]); //id\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}{{api}}/users/",
							"host": [
								"{{base_URL}}{{api}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Authentication (FPW-23)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body contains text - logout button\", ()=>{\r",
									"     pm.expect(pm.response.text()).to.include(\"LOGOUT\");\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_URL}}/authenticate",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a public post(FPW-247)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Post content to contains automation message.\", () => {\r",
									"    _.each(jsonData.Responses, (item) => {\r",
									"        //pm.expect(item.content).to.include(pm.collectionVariables.get(\"comment_content\"))\r",
									"        pm.expect(item.content.startsWith(pm.collectionVariables.get(\"post_content\"))).to.be.true;\r",
									"        })\r",
									"});\r",
									"\r",
									"pm.test(\"Response to have post_id section or error message\", function () {\r",
									"    var hasItems = pm.response.text().includes(\"postId\");\r",
									"    var errorMsg = \"Content size must be up to 1000 symbols\"\r",
									"    pm.expect(hasItems, errorMsg );\r",
									"});\r",
									"\r",
									"//console.log(jsonData.postId);\r",
									"pm.collectionVariables.set(\"postId\", jsonData.postId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": {{post_content}},\r\n  \"picture\": {{picture_content}},\r\n  \"public\": true\r\n}"
						},
						"url": {
							"raw": "{{base_URL}}{{api}}{{post}}/auth/creator",
							"host": [
								"{{base_URL}}{{api}}{{post}}"
							],
							"path": [
								"auth",
								"creator"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find All posts (FPW-246)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response to have comment_id section\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"postId\");\r",
									"});\r",
									"\r",
									"//console.log(pm.response.json());\r",
									"\r",
									"var resp = pm.response.json();\r",
									"pm.test(\"Response to contains comments send from automation\", () => {\r",
									"    _.each(resp.Responses, (item) => {\r",
									"        //pm.expect(item.content).to.include(pm.collectionVariables.get(\"comment_content\"))\r",
									"        pm.expect(item.content.startsWith(pm.collectionVariables.get(\"post_content\"))).to.be.true;\r",
									"        })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_URL}}{{api}}{{post}}/",
							"host": [
								"{{base_URL}}{{api}}{{post}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit a post (FPW-248)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true,
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": {{edit_post_content}},\r\n  \"picture\": \"no picki\",\r\n  \"public\": true\r\n}"
						},
						"url": {
							"raw": "{{base_URL}}{{api}}{{post}}/auth/editor?postId={{postId}}",
							"host": [
								"{{base_URL}}{{api}}{{post}}"
							],
							"path": [
								"auth",
								"editor"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a comment (FPW-254)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response to contains automation message\", () => {\r",
									"    _.each(jsonData.Responses, (item) => {\r",
									"        //pm.expect(item.content).to.include(pm.collectionVariables.get(\"comment_content\"))\r",
									"        pm.expect(item.content.startsWith(pm.collectionVariables.get(\"comment_content\"))).to.be.true;\r",
									"        })\r",
									"});\r",
									"\r",
									"pm.test(\"Response to have commentId section\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"commentId\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"comment_id\", jsonData.commentId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"commentId\": 0,\r\n  \"content\": {{comment_content}},\r\n  \"deletedConfirmed\": true,\r\n  \"postId\": {{postId}},\r\n  \"userId\": {{user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}{{api}}{{comment}}/auth/creator",
							"host": [
								"{{base_URL}}{{api}}{{comment}}"
							],
							"path": [
								"auth",
								"creator"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all comments by post (FPW-259)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response to contains automation comments\", () => {\r",
									"    _.each(jsonData.Responses, (item) => {\r",
									"        //pm.expect(item.content).to.include(pm.collectionVariables.get(\"comment_content\"))\r",
									"        pm.expect(item.content.startsWith(pm.collectionVariables.get(\"comment_content\"))).to.be.true;\r",
									"        })\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "digest",
							"digest": [
								{
									"key": "password",
									"value": "12345678",
									"type": "string"
								},
								{
									"key": "username",
									"value": "adminTeam",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "MD5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}{{api}}{{comment}}/byPost?postId={{postId}}",
							"host": [
								"{{base_URL}}{{api}}{{comment}}"
							],
							"path": [
								"byPost"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit a comment (FPW-255)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(pm.response.text());\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true,
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "set-cookie",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_URL}}/api/comment/auth/editor?commentId={{comment_id}}&content={{edited_comment_content}}",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"api",
								"comment",
								"auth",
								"editor"
							],
							"query": [
								{
									"key": "commentId",
									"value": "{{comment_id}}"
								},
								{
									"key": "content",
									"value": "{{edited_comment_content}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a comment (FPW-258)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}{{api}}{{comment}}/auth/manager?commentId={{comment_id}}",
							"host": [
								"{{base_URL}}{{api}}{{comment}}"
							],
							"path": [
								"auth",
								"manager"
							],
							"query": [
								{
									"key": "commentId",
									"value": "{{comment_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a post (FPW-251)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "digest",
							"digest": [
								{
									"key": "username",
									"value": "Dumbo",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "MD5",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}{{api}}{{post}}/auth/manager?postId={{postId}}",
							"host": [
								"{{base_URL}}{{api}}{{post}}"
							],
							"path": [
								"auth",
								"manager"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var moment = require('moment');",
							"var pastDate = pm.variables.replaceIn(\"{{$randomDatePast}}\")",
							"pastDate = moment(pastDate).format((\"YYYY-MM-DD\"));",
							"",
							"var moment = require('moment');",
							"var memberDate = pm.variables.replaceIn(\"{{$randomDatePast}}\")",
							"memberDate = moment(memberDate).format((\"DD/MM/YYYY\"));",
							"",
							"pm.collectionVariables.set(\"random_memberDate\", memberDate)",
							"pm.collectionVariables.set(\"random_pastDate\", pastDate)",
							"pm.collectionVariables.set(\"random_city\", _.random(1,25))",
							"pm.collectionVariables.set(\"random_number\", _.random(1,10))"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "User Controllers",
			"item": [
				{
					"name": "Get All Users (FPW-232)",
					"item": [
						{
							"name": "Get All Users (FPW-232)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ([200].includes(pm.response.code)){\r",
											"var jsonData = pm.response.json();\r",
											"var resp = pm.response.text();\r",
											"\r",
											"     pm.test(\"Status code is 200\", function () {\r",
											"     pm.response.to.have.status(200);\r",
											" });\r",
											"\r",
											"pm.collectionVariables.set(\"expertiseProfile_id\", jsonData[0].expertiseProfile.id);\r",
											"\r",
											"pm.test(\"Response body contains necessary fields\", function () {\r",
											"    pm.expect(resp).to.include(\"userId\");\r",
											"    pm.expect(resp).to.include(\"username\");\r",
											"    pm.expect(resp).to.include(\"expertiseProfile\");\r",
											"    pm.expect(resp).to.include(\"skills\");\r",
											"    pm.expect(resp).to.include(\"category\");\r",
											"    pm.expect(resp).to.include(\"availability\");\r",
											"    pm.expect(resp).to.include(\"accountNonExpired\");\r",
											"});\r",
											"} else {\r",
											"    var jsonData = pm.response.json();\r",
											"    console.log(\"Response status\", jsonData.status);\r",
											"    console.log(\"Response error\", jsonData.error);    \r",
											"    console.log(\"Response message\", jsonData.message);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"index\": 0,\r\n  \"next\": true,\r\n  \"searchParam1\": \"\",\r\n  \"searchParam2\": \"\",\r\n  \"size\": 20\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{users}}",
									"host": [
										"{{base_URL}}{{api}}{{users}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User registration (FPW-233)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_ADMIN\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Show User Post by ID (FPW-234)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Show User Post by ID (FPW-234)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response to have post_id section\", function () {\r",
											"    var hasItems = pm.response.text().includes(\"postId\");\r",
											"    var errorMsg = \"Content size must be up to 1000 symbols\"\r",
											"    pm.expect(hasItems, errorMsg );\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login);\r",
											"\r",
											"var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, res){\r",
											"    var jsonData = res.json();\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"        console.log(jsonData.content);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"index\": 0,\r\n  \"next\": true,\r\n  \"searchParam1\": \"string\",\r\n  \"searchParam2\": \"string\",\r\n  \"size\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{users}}/{{user_id}}/posts",
									"host": [
										"{{base_URL}}{{api}}{{users}}"
									],
									"path": [
										"{{user_id}}",
										"posts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get User by ID (FPW-235)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User by ID (FPW-235)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var resp = pm.response.text();\r",
											"\r",
											"\r",
											"pm.test(\"Response body contains all necessary fields\", function () {\r",
											"    pm.expect(jsonData.id == pm.collectionVariables.get(\"user_id\"));\r",
											"    pm.expect(jsonData.username).eqls(pm.collectionVariables.get(\"username\"));\r",
											"    pm.expect(resp).to.include(\"email\");\r",
											"   // pm.expect(resp).to.include(\"expertiseProfile\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/api/users/auth/{{user_id}}?principal={{username}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"api",
										"users",
										"auth",
										"{{user_id}}"
									],
									"query": [
										{
											"key": "principal",
											"value": "{{username}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upgrade Expertise Profile (FPW-236)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Users (FPW-232)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var resp = pm.response.text();\r",
											"\r",
											"pm.collectionVariables.set(\"expertiseProfile_id\", jsonData[0].expertiseProfile.id);\r",
											"\r",
											"pm.test(\"Response body contains necessary fields\", function () {\r",
											"    pm.expect(resp).to.include(\"userId\");\r",
											"    pm.expect(resp).to.include(\"username\");\r",
											"    pm.expect(resp).to.include(\"expertiseProfile\");\r",
											"    pm.expect(resp).to.include(\"skills\");\r",
											"    pm.expect(resp).to.include(\"category\");\r",
											"    pm.expect(resp).to.include(\"availability\");\r",
											"    pm.expect(resp).to.include(\"accountNonExpired\");\r",
											"});\r",
											"\r",
											"//console.log(jsonData[0].userId);\r",
											"//console.log(pm.collectionVariables.get(\"user_id\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"index\": 0,\r\n  \"next\": true,\r\n  \"searchParam1\": \"\",\r\n  \"searchParam2\": \"\",\r\n  \"size\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{users}}",
									"host": [
										"{{base_URL}}{{api}}{{users}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade Expertise Profile (FPW-236)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"\r",
											"  pm.test(\"Response body contains all properties\", function () {\r",
											"    pm.expect(jsonData.id).eqls(pm.collectionVariables.get(\"expertiseProfile_id\"))\r",
											"   pm.expect(jsonData.skills[0].category.name).to.eql(pm.collectionVariables.get(\"category_name\"))\r",
											"   pm.expect(jsonData.skills[0].category.id).to.eql(parseInt(pm.collectionVariables.get(\"category_id\")))\r",
											"   pm.expect(jsonData.skills[0].skill).to.be.a('string')\r",
											" });\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"availability\": {{$randomInt}}, \r\n  \"category\": {\r\n    \"id\": {{category_id}}, \r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"id\": {{expertiseProfile_id}},\r\n  \"skill1\": \"skill1 {{CurrentDate}}\",\r\n  \"skill2\": \"skill2 {{CurrentDate}}\",\r\n  \"skill3\": \"skill3 {{CurrentDate}}\",\r\n  \"skill4\": \"skill4 {{CurrentDate}}\",\r\n  \"skill5\": \"skill5 {{CurrentDate}}\",\r\n  \"skills\": [\r\n    \"skill {{CurrentDate}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/api/users/auth/{{user_id}}/expertise",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"api",
										"users",
										"auth",
										"{{user_id}}",
										"expertise"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upgrade Personal Profile (FPW-237)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade Personal Profile (FPW-237)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var registerUser = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/users/', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"  \"authorities\": [\r",
											"    \"ROLE_USER\"\r",
											"  ],\r",
											"  \"category\": {\r",
											"             \"id\": pm.collectionVariables.get('category_id'),\r",
											"            \"name\": pm.collectionVariables.get('category_name')\r",
											"  },\r",
											"  \"confirmPassword\": pm.collectionVariables.get('password'),\r",
											"  \"email\": pm.collectionVariables.get('email_random'),\r",
											"  \"password\": pm.collectionVariables.get('password'),\r",
											"  \"username\": pm.collectionVariables.get('username_random')\r",
											"})\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(registerUser, function (err, res){\r",
											"    var jsonData = res.json();\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"        console.log(\"success\");\r",
											"    }\r",
											"});\r",
											"\r",
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json()\r",
											"\r",
											" pm.test(\"Response body contains all properties\", function () {\r",
											"\r",
											"    pm.expect(jsonData.firstName).to.be.a('string')\r",
											"    pm.expect(jsonData.lastName).to.be.a('string')\r",
											"    pm.expect(jsonData.personalReview).to.be.a('string')\r",
											"    pm.expect(typeof(jsonData.location))==='array'\r",
											"    pm.expect(jsonData.birthYear).to.match(/^\\d{4}\\-\\d{2}\\-\\d{2}$/)\r",
											"   \r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"birthYear\": \"{{random_birthDate}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"id\": {{user_id}}, \r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"location\": {\r\n    \"city\": {\r\n      \"city\": \"\",\r\n      \"country\": {},\r\n      \"id\": {{random_city}}//1-25\r\n    },\r\n    \"id\": 0\r\n  },\r\n  \"memberSince\": \"\",\r\n  \"personalReview\": \"{{$randomLoremSentence}}\",\r\n  \"picture\": {{picture_content}},\r\n  \"picturePrivacy\": true,\r\n  \"sex\": \"{{sex}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/api/users/auth/{{user_id}}/personal",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"api",
										"users",
										"auth",
										"{{user_id}}",
										"personal"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// var moment = require('moment');",
							"// var pastDate = pm.variables.replaceIn(\"{{$randomDatePast}}\")",
							"// pastDate = moment(pastDate).format((\"YYYY-MM-DD\"));",
							"",
							"// var moment = require('moment');",
							"// var memberDate = pm.variables.replaceIn(\"{{$randomDatePast}}\")",
							"// memberDate = moment(memberDate).format((\"DD/MM/YYYY\"));",
							"",
							"// pm.collectionVariables.set(\"random_memberDate\", memberDate)",
							"// pm.collectionVariables.set(\"random_pastDate\", pastDate)",
							"pm.collectionVariables.set(\"random_city\", _.random(1,25))",
							"// pm.collectionVariables.set(\"random_number\", _.random(1,10))"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// if ([200].includes(pm.response.code)){",
							"//      pm.test(\"Status code is 200\", function () {",
							"//      pm.response.to.have.status(200);",
							"//  });",
							"// } else {",
							"//     var jsonData = pm.response.json();",
							"//     console.log(\"Response status\", jsonData.status);",
							"//     console.log(\"Response error\", jsonData.error);    ",
							"//     console.log(\"Response message\", jsonData.message);",
							"// }"
						]
					}
				}
			]
		},
		{
			"name": "Post Controllers",
			"item": [
				{
					"name": "Create a public post(FPW-247)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a public post(FPW-247)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response to contains given post content\", function () {\r",
											"    result = false;\r",
											"   if (JSON.stringify(jsonData.content).includes(\"Automated post from Postman\")){\r",
											"        result = true;\r",
											"    }\r",
											"    pm.expect(result).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Response to have post_id section\", function () {\r",
											"    var hasItems = pm.response.text().includes(\"postId\");\r",
											"    var errorMsg = \"Content size must be up to 1000 symbols\"\r",
											"    pm.expect(hasItems, errorMsg );\r",
											"});\r",
											"\r",
											"pm.test(\"Response to have date\", function () {\r",
											"    pm.expect(jsonData.date).not.be.null;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"postId\", jsonData.postId);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": {{post_content}},\r\n  \"picture\": {{picture_content}},\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{post}}/auth/creator",
									"host": [
										"{{base_URL}}{{api}}{{post}}"
									],
									"path": [
										"auth",
										"creator"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Find All posts (FPW-246)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Find All posts (FPW-246)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var resp = pm.response.text();\r",
											"\r",
											"pm.test(\"Response to have necessary sections\", function () {\r",
											"    pm.expect(resp).to.include(\"postId\");\r",
											"    pm.expect(resp).to.include(\"content\");\r",
											"    pm.expect(resp).to.include(\"date\");\r",
											"    pm.expect(jsonData[0].category.id).eqls( parseInt(pm.collectionVariables.get(\"category_id\")));\r",
											"    pm.expect(jsonData[0].category.name).eqls( pm.collectionVariables.get(\"category_name\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}{{api}}{{post}}/",
									"host": [
										"{{base_URL}}{{api}}{{post}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit a post (FPW-248)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit a post (FPW-248)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    }\r",
											"});\r",
											"    });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true,
									"accept": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": {{edit_post_content}},\r\n  \"picture\": \"no picki\",\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{post}}/auth/editor?postId={{postId}}",
									"host": [
										"{{base_URL}}{{api}}{{post}}"
									],
									"path": [
										"auth",
										"editor"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{postId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Like a post (FPW-249)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Like a post (FPW-249)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate post is liked.\", function () {\r",
											"    pm.expect(JSON.stringify(jsonData.liked)).to.eql(\"true\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate user liked the post.\", function () {\r",
											"    pm.expect(jsonData.likes[0].username).eqls(pm.collectionVariables.get(\"username\"));\r",
											"});\r",
											"\r",
											"// console.log(jsonData.likes[0].username);\r",
											"// console.log(pm.collectionVariables.get(\"username\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    }\r",
											"});\r",
											"    });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "username",
											"value": "Dumbo",
											"type": "string"
										},
										{
											"key": "password",
											"value": "12345678",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{post}}/auth/likesUp?postId={{postId}}",
									"host": [
										"{{base_URL}}{{api}}{{post}}"
									],
									"path": [
										"auth",
										"likesUp"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{postId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Unlike a post (FPW-250)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate comment is liked.\", function () {\r",
											"    pm.expect(JSON.stringify(jsonData.liked)).to.eql(\"false\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "username",
											"value": "Dumbo",
											"type": "string"
										},
										{
											"key": "password",
											"value": "12345678",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{post}}/auth/likesUp?postId={{postId}}",
									"host": [
										"{{base_URL}}{{api}}{{post}}"
									],
									"path": [
										"auth",
										"likesUp"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{postId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Show comments on post (FPW-252)",
					"item": [
						{
							"name": "Show comments on post (FPW-252)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var resp = pm.response.text();\r",
											"\r",
											"try {\r",
											"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
											"    pm.test(\"Response body is empty\", function () {\r",
											"    });\r",
											"} catch (e){\r",
											"\r",
											"pm.test(\"Response comment to have neccessary fields\", function () {\r",
											"    pm.expect(jsonData.date).not.be.null;\r",
											"    pm.expect(resp).to.contain(\"commentId\");\r",
											"   pm.expect(resp).to.contain(\"content\");\r",
											"});\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    }\r",
											"});\r",
											"    });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "password",
											"value": "12345678",
											"type": "string"
										},
										{
											"key": "username",
											"value": "adminTeam",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{post}}/Comments?postId={{postId}}",
									"host": [
										"{{base_URL}}{{api}}{{post}}"
									],
									"path": [
										"Comments"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{postId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete a post (FPW-251)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a post (FPW-251)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    }\r",
											"});\r",
											"    });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "username",
											"value": "Dumbo",
											"type": "string"
										},
										{
											"key": "password",
											"value": "12345678",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{post}}/auth/manager?postId={{postId}}",
									"host": [
										"{{base_URL}}{{api}}{{post}}"
									],
									"path": [
										"auth",
										"manager"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{postId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Comment Controllers",
			"item": [
				{
					"name": "Find All comments(FPW-253)",
					"item": [
						{
							"name": "Find All comments(FPW-253)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
											"    pm.test(\"Response body is empty\", function () {\r",
											"    });\r",
											"} catch (e){\r",
											"pm.test(\"Response to have commentId, date, likes sections\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"commentId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
											"    pm.expect(pm.response.text()).to.include(\"date\");\r",
											"});\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{comment}}",
									"host": [
										"{{base_URL}}{{api}}{{comment}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create a comment (FPW-254)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a comment (FPW-254)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response to contains given comment content\", function () {\r",
											"    result = false;\r",
											"   if (JSON.stringify(jsonData.content).includes(\"Automated comment from Postman\")){\r",
											"        result = true;\r",
											"    }\r",
											"    pm.expect(result).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Response to have commentId, date, likes sections\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"commentId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
											"    pm.expect(pm.response.text()).to.include(\"date\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"comment_id\", jsonData.commentId);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    }\r",
											"});\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"commentId\": 0,\r\n  \"content\": {{comment_content}},\r\n  \"deletedConfirmed\": true,\r\n  \"postId\": {{postId}},\r\n  \"userId\": {{user_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{comment}}/auth/creator",
									"host": [
										"{{base_URL}}{{api}}{{comment}}"
									],
									"path": [
										"auth",
										"creator"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit a comment (FPW-255)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit a comment (FPW-255)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    var createComment = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/comment/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"            {\r",
											"  \"commentId\": 0,\r",
											"  \"content\": pm.collectionVariables.get(\"comment_content\"),\r",
											"  \"deletedConfirmed\": true,\r",
											"  \"postId\": pm.collectionVariables.get(\"postId\"),\r",
											"  \"userId\": pm.collectionVariables.get(\"user_id\")\r",
											"            })\r",
											"    }  \r",
											"};\r",
											"pm.sendRequest(createComment, function (err, response){\r",
											" if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"comment_id\", response.json().commentId);\r",
											"    }\r",
											"});\r",
											"});\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true,
									"accept": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "set-cookie",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_URL}}/api/comment/auth/editor?commentId={{comment_id}}&content={{edited_comment_content}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"api",
										"comment",
										"auth",
										"editor"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{comment_id}}"
										},
										{
											"key": "content",
											"value": "{{edited_comment_content}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Like a comment (FPW-256)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Like a comment (FPW-256)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate comment is liked.\", function () {\r",
											"    pm.expect(JSON.stringify(jsonData.liked)).to.eql(\"true\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate user liked the comment.\", function () {\r",
											"    pm.expect(jsonData.likes[0].username).eqls(pm.collectionVariables.get(\"username\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    var createComment = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/comment/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"            {\r",
											"  \"commentId\": 0,\r",
											"  \"content\": pm.collectionVariables.get(\"comment_content\"),\r",
											"  \"deletedConfirmed\": true,\r",
											"  \"postId\": pm.collectionVariables.get(\"postId\"),\r",
											"  \"userId\": pm.collectionVariables.get(\"user_id\")\r",
											"            })\r",
											"    }  \r",
											"};\r",
											"pm.sendRequest(createComment, function (err, response){\r",
											" if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"comment_id\", response.json().commentId);\r",
											"    }\r",
											"});\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{comment}}/auth/likesUp?commentId={{comment_id}}",
									"host": [
										"{{base_URL}}{{api}}{{comment}}"
									],
									"path": [
										"auth",
										"likesUp"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{comment_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Unlike a comment (FPW-257)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate comment is unliked.\", function () {\r",
											"    pm.expect(JSON.stringify(jsonData.liked)).to.eql(\"false\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{comment}}/auth/likesUp?commentId={{comment_id}}",
									"host": [
										"{{base_URL}}{{api}}{{comment}}"
									],
									"path": [
										"auth",
										"likesUp"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{comment_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete a comment (FPW-258)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a comment (FPW-258)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    var createComment = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/comment/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"            {\r",
											"  \"commentId\": 0,\r",
											"  \"content\": pm.collectionVariables.get(\"comment_content\"),\r",
											"  \"deletedConfirmed\": true,\r",
											"  \"postId\": pm.collectionVariables.get(\"postId\"),\r",
											"  \"userId\": pm.collectionVariables.get(\"user_id\")\r",
											"            })\r",
											"    }  \r",
											"};\r",
											"pm.sendRequest(createComment, function (err, response){\r",
											" if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"comment_id\", response.json().commentId);\r",
											"    }\r",
											"});\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{comment}}/auth/manager?commentId={{comment_id}}",
									"host": [
										"{{base_URL}}{{api}}{{comment}}"
									],
									"path": [
										"auth",
										"manager"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{comment_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all comments by post (FPW-259)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all comments by post (FPW-259)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"try {\r",
											"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
											"    pm.test(\"Response body is empty\", function () {\r",
											"    });\r",
											"} catch (e){\r",
											"\r",
											"pm.test(\"Response to have commentId, date, likes sections\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"commentId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
											"    pm.expect(pm.response.text()).to.include(\"date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response to contains comment post content\", function () {\r",
											"    result = false;\r",
											"   if (JSON.stringify(jsonData[0].content).includes(\"comment from Postman\")){\r",
											"        result = true;\r",
											"    }\r",
											"    pm.expect(result).to.be.true;\r",
											"});\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    }\r",
											"});\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "password",
											"value": "12345678",
											"type": "string"
										},
										{
											"key": "username",
											"value": "adminTeam",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{comment}}/byPost?postId={{postId}}",
									"host": [
										"{{base_URL}}{{api}}{{comment}}"
									],
									"path": [
										"byPost"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{postId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get one comments by post (FPW-260)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one comments by post (FPW-260)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response to have commentId, date, likes sections\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"commentId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"likes\");\r",
											"    pm.expect(pm.response.text()).to.include(\"date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response to contains comment post content\", function () {\r",
											"    result = false;\r",
											"   if (JSON.stringify(jsonData.content).includes(\"comment from Postman\")){\r",
											"        result = true;\r",
											"    }\r",
											"    pm.expect(result).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    var createComment = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/comment/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"            {\r",
											"  \"commentId\": 0,\r",
											"  \"content\": pm.collectionVariables.get(\"comment_content\"),\r",
											"  \"deletedConfirmed\": true,\r",
											"  \"postId\": pm.collectionVariables.get(\"postId\"),\r",
											"  \"userId\": pm.collectionVariables.get(\"user_id\")\r",
											"            })\r",
											"    }  \r",
											"};\r",
											"pm.sendRequest(createComment, function (err, response){\r",
											" if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"comment_id\", response.json().commentId);\r",
											"    }\r",
											"});\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "password",
											"value": "12345678",
											"type": "string"
										},
										{
											"key": "username",
											"value": "adminTeam",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{comment}}/single?commentId={{comment_id}}",
									"host": [
										"{{base_URL}}{{api}}{{comment}}"
									],
									"path": [
										"single"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{comment_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Skill Controllers",
			"item": [
				{
					"name": "Create skill (FPW-239)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create skill (FPW-239)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response to have skillId section\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"skillId\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response to have skill section\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"skill\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response to have category id and name.\", function () {\r",
											"    pm.expect(pm.response.json().category.id) ===pm.collectionVariables.get(\"category_id\");\r",
											"    pm.expect(pm.response.json().category.name).eqls(pm.collectionVariables.get(\"category_name\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"skill_id\", pm.response.json().skillId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login);\r",
											"\r",
											"var text=pm.variables.replaceIn(\"{{$randomCatchPhrase}}\");\r",
											"\r",
											"pm.collectionVariables.set(\"skill_text\",text);\r",
											"\r",
											"pm.sendRequest(\"http://localhost:8081/api/skill?unsorted=true\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"skill\": \"{{skill_text}} {{$randomDateRecent}}\",\r\n  \"skillId\": {{$randomInt}}\r\n}"
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{skill}}/create",
									"host": [
										"{{base_URL}}{{api}}{{skill}}"
									],
									"path": [
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Find all skills (FPW-238)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Find all skills (FPW-238)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response to have skillId section\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"skillId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response to have skill section\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"skill\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response to have category id and name.\", function () {\r",
											"    pm.expect(pm.response.json()[0].category.id) ===pm.collectionVariables.get(\"category_id\");\r",
											"    pm.expect(pm.response.json()[0].category.name).eqls(pm.collectionVariables.get(\"category_name\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_URL}}{{api}}{{skill}}?unsorted=true",
									"host": [
										"{{base_URL}}{{api}}{{skill}}"
									],
									"query": [
										{
											"key": "unsorted",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit skill (FPW-241)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit skill (FPW-241)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var text=pm.variables.replaceIn(\"{{$randomCatchPhrase}}\");\r",
											"pm.collectionVariables.set(\"skill_update\",text);\r",
											"\r",
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createSkill = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/skill/create', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"category\": {\r",
											"            \"id\": pm.collectionVariables.get(\"category_id\"),\r",
											"            \"name\": pm.collectionVariables.get(\"category_name\")\r",
											"        },\r",
											"            \"skill\": pm.collectionVariables.get(\"skill_text\"),\r",
											"            \"skillId\": 0\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createSkill, function (err, response){\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"skill_id\", response.json().skillId);\r",
											"    }\r",
											"});\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{skill}}/edit?skill={{skill_update}}&skillId={{skill_id}}",
									"host": [
										"{{base_URL}}{{api}}{{skill}}"
									],
									"path": [
										"edit"
									],
									"query": [
										{
											"key": "skill",
											"value": "{{skill_update}}"
										},
										{
											"key": "skillId",
											"value": "{{skill_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get one skill (FPW-242)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one skill (FPW-242)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response to have skillId section\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"skillId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response to have skill section\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"skill\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response to have category id and name.\", function () {\r",
											"    pm.expect(pm.response.json().category.id) ===pm.collectionVariables.get(\"category_id\");\r",
											"    pm.expect(pm.response.json().category.name).eqls(pm.collectionVariables.get(\"category_name\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var text=pm.variables.replaceIn(\"{{$randomCatchPhrase}}\");\r",
											"pm.collectionVariables.set(\"skill_update\",text);\r",
											"\r",
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createSkill = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/skill/create', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"category\": {\r",
											"            \"id\": pm.collectionVariables.get(\"category_id\"),\r",
											"            \"name\": pm.collectionVariables.get(\"category_name\")\r",
											"        },\r",
											"            \"skill\": pm.collectionVariables.get(\"skill_text\"),\r",
											"            \"skillId\": 0\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createSkill, function (err, response){\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"skill_id\", response.json().skillId);\r",
											"    }\r",
											"});\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "username",
											"value": "Dumbo",
											"type": "string"
										},
										{
											"key": "password",
											"value": "12345678",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{skill}}/getOne?skillId={{skill_id}}",
									"host": [
										"{{base_URL}}{{api}}{{skill}}"
									],
									"path": [
										"getOne"
									],
									"query": [
										{
											"key": "skillId",
											"value": "{{skill_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete skill (FPW-240)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete skill (FPW-240)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var text=pm.variables.replaceIn(\"{{$randomCatchPhrase}}\");\r",
											"pm.collectionVariables.set(\"skill_update\",text);\r",
											"\r",
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createSkill = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/skill/create', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"category\": {\r",
											"            \"id\": pm.collectionVariables.get(\"category_id\"),\r",
											"            \"name\": pm.collectionVariables.get(\"category_name\")\r",
											"        },\r",
											"            \"skill\": pm.collectionVariables.get(\"skill_update\"),\r",
											"            \"skillId\": 0\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createSkill, function (err, response){\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"skill_id\", response.json().skillId);\r",
											"    }\r",
											"});\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true,
									"accept": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{skill}}/delete?skillId={{skill_id}}",
									"host": [
										"{{base_URL}}{{api}}{{skill}}"
									],
									"path": [
										"delete"
									],
									"query": [
										{
											"key": "skillId",
											"value": "{{skill_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Connection Controllers - Happy Path",
			"item": [
				{
					"name": "User One registration (FPW-233)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = pm.response.text()\r",
									"\r",
									" pm.test(\"Response body contains username and id\", ()=>{\r",
									"     pm.expect(resp).to.include(\"name\");\r",
									"     pm.expect(resp).to.include(\"id\");\r",
									" })\r",
									"\r",
									"pm.collectionVariables.set(\"usernameOne\", resp.split(\" \")[3]);\r",
									"pm.collectionVariables.set(\"userOne_id\", resp.split(\" \")[6]);\r",
									"\r",
									"//console.log(resp.split(\" \")[3]); //username\r",
									"//console.log(resp.split(\" \")[6]); //id\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}{{api}}/users/",
							"host": [
								"{{base_URL}}{{api}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User Two registration (FPW-233)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = pm.response.text()\r",
									"\r",
									"pm.test(\"Response body contains username and id\", ()=>{\r",
									"     pm.expect(resp).to.include(\"name\");\r",
									"     pm.expect(resp).to.include(\"id\");\r",
									" })\r",
									"\r",
									"pm.collectionVariables.set(\"usernameTwo\", resp.split(\" \")[3]);\r",
									"pm.collectionVariables.set(\"userTwo_id\", resp.split(\" \")[6]);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}{{api}}/users/",
							"host": [
								"{{base_URL}}{{api}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Send connect request (FPW-243)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const html = cheerio(responseBody);\r",
									"pm.test(\"Response has succefull message for sending connection- Good job! You have send friend request\", function () {\r",
									"   pm.expect(pm.response.text()).to.include(\"Good job! You have send friend request!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var user=pm.collectionVariables.get(\"usernameOne\");\r",
									"var pass=pm.collectionVariables.get(\"password\");\r",
									"\r",
									"var login = {\r",
									"    method: 'POST', \r",
									"    url: 'http://localhost:8081/authenticate', \r",
									"    header: {\r",
									"        'Content-Type': 'multipart/form-data', \r",
									"    },\r",
									"    body: {\r",
									"        mode: 'formdata',\r",
									"        formdata: [\r",
									"            { key: 'username', value: user },\r",
									"            { key: 'password', value: pass },\r",
									"            \r",
									"        ]\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(login);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/auth/connection/request?id={{userTwo_id}}&username={{usernameTwo}}",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"auth",
								"connection",
								"request"
							],
							"query": [
								{
									"key": "id",
									"value": "{{userTwo_id}}"
								},
								{
									"key": "username",
									"value": "{{usernameTwo}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get connection requests (FPW-244)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"connectID\", jsonData[0].id);\r",
									"\r",
									"pm.test(\"Response to have all necessary fields.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"timeStamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection request is not yet approved test\", function () {\r",
									"    pm.expect(jsonData[0].approved)==\"false\";\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var user=pm.collectionVariables.get(\"usernameTwo\");\r",
									"var pass=pm.collectionVariables.get(\"password\");\r",
									"\r",
									"var login = {\r",
									"    method: 'POST', \r",
									"    url: 'http://localhost:8081/authenticate', \r",
									"    header: {\r",
									"        'Content-Type': 'multipart/form-data', \r",
									"    },\r",
									"    body: {\r",
									"        mode: 'formdata',\r",
									"        formdata: [\r",
									"            { key: 'username', value: user },\r",
									"            { key: 'password', value: pass },\r",
									"            \r",
									"        ]\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(login);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/api/auth/users/{{userTwo_id}}/request/",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{userTwo_id}}",
								"request",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept connection request (FPW-245)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate response has same content\", function () {\r",
									"   pm.expect(pm.response.text()).to.include(\"approved request\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var user=pm.collectionVariables.get(\"usernameTwo\");\r",
									"var pass=pm.collectionVariables.get(\"password\");\r",
									"\r",
									"var login = {\r",
									"    method: 'POST', \r",
									"    url: 'http://localhost:8081/authenticate', \r",
									"    header: {\r",
									"        'Content-Type': 'multipart/form-data', \r",
									"    },\r",
									"    body: {\r",
									"        mode: 'formdata',\r",
									"        formdata: [\r",
									"            { key: 'username', value: user },\r",
									"            { key: 'password', value: pass },\r",
									"            \r",
									"        ]\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(login);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/api/auth/users/{{userTwo_id}}/request/approve?name={{usernameTwo}}&requestId={{connectID}}",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{userTwo_id}}",
								"request",
								"approve"
							],
							"query": [
								{
									"key": "name",
									"value": "{{usernameTwo}}"
								},
								{
									"key": "requestId",
									"value": "{{connectID}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var moment = require('moment');",
							"var pastDate = pm.variables.replaceIn(\"{{$randomDatePast}}\")",
							"pastDate = moment(pastDate).format((\"YYYY-MM-DD\"));",
							"",
							"var moment = require('moment');",
							"var memberDate = pm.variables.replaceIn(\"{{$randomDatePast}}\")",
							"memberDate = moment(memberDate).format((\"DD/MM/YYYY\"));",
							"",
							"pm.collectionVariables.set(\"random_memberDate\", memberDate)",
							"pm.collectionVariables.set(\"random_pastDate\", pastDate)",
							"pm.collectionVariables.set(\"random_city\", _.random(1,25))",
							"pm.collectionVariables.set(\"random_number\", _.random(1,10))"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var user=pm.collectionVariables.get(\"username\");",
							"var pass=pm.collectionVariables.get(\"password\");"
						]
					}
				}
			]
		},
		{
			"name": "Unhappy paths",
			"item": [
				{
					"name": "Get deleted comments by post (FPW-269)",
					"item": [
						{
							"name": "Delete a comment (FPW-258)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    var createComment = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/comment/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"            {\r",
											"  \"commentId\": 0,\r",
											"  \"content\": pm.collectionVariables.get(\"comment_content\"),\r",
											"  \"deletedConfirmed\": true,\r",
											"  \"postId\": pm.collectionVariables.get(\"postId\"),\r",
											"  \"userId\": pm.collectionVariables.get(\"user_id\")\r",
											"            })\r",
											"    }  \r",
											"};\r",
											"pm.sendRequest(createComment, function (err, response){\r",
											" if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"comment_id\", response.json().commentId);\r",
											"    }\r",
											"});\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{comment}}/auth/manager?commentId={{comment_id}}",
									"host": [
										"{{base_URL}}{{api}}{{comment}}"
									],
									"path": [
										"auth",
										"manager"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{comment_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get deleted comments by post (FPW-269)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text();\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Proper Error Status appears\", function () {\r",
											"    pm.expect(jsonData.status).eqls(404);\r",
											"});\r",
											"pm.test(\"Proper Error appears\", function () {\r",
											"    pm.expect(jsonData.error).eqls(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "password",
											"value": "12345678",
											"type": "string"
										},
										{
											"key": "username",
											"value": "adminTeam",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{comment}}/single?commentId={{comment_id}}",
									"host": [
										"{{base_URL}}{{api}}{{comment}}"
									],
									"path": [
										"single"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{comment_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upgrade other user's expertise profile (FPW-265)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											"pm.test(\"Response body contains username and id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"name\");\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"usernameTwo\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"userTwo_id\", resp.split(\" \")[6]);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade other user's expertise profile (FPW-265)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"var jsonData = pm.response.json();\r",
											"//pm.collectionVariables.set(\"unauthorized_error\", \"User is not authorised\");\r",
											"\r",
											"pm.test(\"Proper Error Status appears\", function () {\r",
											"    pm.expect(jsonData.status).eqls(401);\r",
											"});\r",
											"pm.test(\"Proper Error appears\", function () {\r",
											"    pm.expect(jsonData.error).eqls(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Proper Error Message appears\", function () {\r",
											"    pm.expect(resp).contains(pm.collectionVariables.get(\"unauthorized_error\"));\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"usernameTwo\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"availability\": {{$randomInt}}, \r\n  \"category\": {\r\n    \"id\": {{category_id}}, \r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"id\": {{expertiseProfile_id}},\r\n  \"skill1\": \"{{$randomIngverb}} {{CurrentDate}}\",\r\n  \"skill2\": \"{{$randomIngverb}} {{CurrentDate}}\",\r\n  \"skill3\": \"{{$randomIngverb}} {{CurrentDate}}\",\r\n  \"skill4\": \"{{$randomIngverb}} {{CurrentDate}}\",\r\n  \"skill5\": \"{{$randomIngverb}} {{CurrentDate}}\",\r\n  \"skills\": [\r\n    \"{{$randomIngverb}} {{CurrentDate}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/api/users/auth/{{user_id}}/expertise",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"api",
										"users",
										"auth",
										"{{user_id}}",
										"expertise"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User registration - username already exists (FPW-263)",
					"item": [
						{
							"name": "User registration - username already exists (FPW-263)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"var jsonData = pm.response.json();\r",
											"//pm.collectionVariables.set(\"username_duplicate_error\", \"User with this username already exist\");\r",
											"\r",
											"pm.test(\"Proper Error Status appears\", function () {\r",
											"    pm.expect(jsonData.status).eqls(409);\r",
											"});\r",
											"pm.test(\"Proper Error appears\", function () {\r",
											"    pm.expect(jsonData.error).eqls(\"Conflict\");\r",
											"});\r",
											"pm.test(\"Proper Error Message appears\", function () {\r",
											"    pm.expect(resp).contains(pm.collectionVariables.get(\"username_duplicate_error\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var registerUser = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/users/', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"  \"authorities\": [\r",
											"    \"ROLE_USER\"\r",
											"  ],\r",
											"  \"category\": {\r",
											"    \"id\": pm.collectionVariables.get(\"category_id\"),\r",
											"    \"name\": pm.collectionVariables.get(\"category_name\")\r",
											"  },\r",
											"  \"confirmPassword\": pm.collectionVariables.get(\"password\"),\r",
											"  \"email\": pm.collectionVariables.get(\"email_random\"),\r",
											"  \"password\": pm.collectionVariables.get(\"password\"),\r",
											"  \"username\": \"{{$randomFirstName}}\"\r",
											"})\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(registerUser);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{username}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User registration - password too short (FPW-262)",
					"item": [
						{
							"name": "User registration - password too short (FPW-262)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"var jsonData = pm.response.json();\r",
											"//pm.collectionVariables.set(\"pass-error_msg\", \"password must be minimum 6 characters\");\r",
											"\r",
											"pm.test(\"Proper Error Status appears\", function () {\r",
											"    pm.expect(jsonData.status).eqls(400);\r",
											"});\r",
											"pm.test(\"Proper Error appears\", function () {\r",
											"    pm.expect(jsonData.error).eqls(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Proper Error Message appears\", function () {\r",
											"    pm.expect(resp).contains(pm.collectionVariables.get(\"pass-error_msg\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomPassTooShort(minValue, maxValue, dataSet = '0123456789') {\r",
											"    if (!minValue) {\r",
											"        minValue = 0;\r",
											"        maxValue = 5;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = minValue;\r",
											"    }\r",
											"    let length = _.random(minValue, maxValue),\r",
											"        randomString = \"\";\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"pm.collectionVariables.set('randomPassTooShort', randomPassTooShort());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n   \"password\": \"{{randomPassTooShort}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User registration - username numeric (FPW-264)",
					"item": [
						{
							"name": "User registration - username numeric (FPW-264)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"username_error\", \"username requires no whitespaces, only character\");\r",
											"\r",
											"pm.test(\"Proper Error Status appears\", function () {\r",
											"    pm.expect(jsonData.status).eqls(400);\r",
											"});\r",
											"pm.test(\"Proper Error appears\", function () {\r",
											"    pm.expect(jsonData.error).eqls(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Proper Error Message appears\", function () {\r",
											"    pm.expect(resp).contains(pm.collectionVariables.get(\"username_error\"));\r",
											"});\r",
											"\r",
											"\r",
											"//console.log(jsonData.errors[0].defaultMessage);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomIntNameEdgeCase(minValue, maxValue, dataSet = '0123456789') {\r",
											"    if (!minValue) {\r",
											"        minValue =2;\r",
											"        maxValue = 30;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = minValue;\r",
											"    }\r",
											"    let length = _.random(minValue, maxValue),\r",
											"        randomString = \"\";\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"pm.collectionVariables.set('randomIntNameEdgeCase', randomIntNameEdgeCase());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{randomIntNameEdgeCase}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create a post - content length too long (FPW-266)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a post - content length too long (FPW-266)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var requestOptions = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(requestOptions);\r",
											"\r",
											"function randomContentEdgeLimit(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue =1001;\r",
											"        maxValue = 1001;\r",
											"    }\r",
											"\r",
											"    if (!maxValue) {\r",
											"        maxValue = minValue;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue),\r",
											"        randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set('randomContentEdgeLimit', randomContentEdgeLimit());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text();\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"content_length_error\", \"Content size must be up to 1000 symbols\");\r",
											"\r",
											"pm.test(\"Proper Error Status appears\", function () {\r",
											"    pm.expect(jsonData.status).eqls(400);\r",
											"});\r",
											"pm.test(\"Proper Error appears\", function () {\r",
											"    pm.expect(jsonData.error).eqls(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Proper Error Message appears\", function () {\r",
											"    pm.expect(resp).contains(pm.collectionVariables.get(\"content_length_error\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{randomContentEdgeLimit}}\",\r\n  \"picture\": {{picture_content}},\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{post}}/auth/creator",
									"host": [
										"{{base_URL}}{{api}}{{post}}"
									],
									"path": [
										"auth",
										"creator"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit a post - content length too long (FPW-267)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit a post - content length too long (FPW-267)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text();\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Proper Error Status appears\", function () {\r",
											"    pm.expect(jsonData.status).eqls(400);\r",
											"});\r",
											"pm.test(\"Proper Error appears\", function () {\r",
											"    pm.expect(jsonData.error).eqls(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Proper Error Message appears\", function () {\r",
											"    pm.expect(resp).contains(pm.collectionVariables.get(\"content_length_error\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    }\r",
											"});\r",
											"    });\r",
											"\r",
											"function randomContentEdgeLimit(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue =1001;\r",
											"        maxValue = 1001;\r",
											"    }\r",
											"\r",
											"    if (!maxValue) {\r",
											"        maxValue = minValue;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue),\r",
											"        randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set('randomContentEdgeLimit', randomContentEdgeLimit());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true,
									"accept": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{randomContentEdgeLimit}}\",\r\n  \"picture\": {{picture_content}},\r\n  \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{post}}/auth/editor?postId={{postId}}",
									"host": [
										"{{base_URL}}{{api}}{{post}}"
									],
									"path": [
										"auth",
										"editor"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{postId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create a comment - content length too long (FPW-268)",
					"item": [
						{
							"name": "User registration (FPW-233)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text()\r",
											"\r",
											" pm.test(\"Response body contains id\", ()=>{\r",
											"     pm.expect(resp).to.include(\"id\");\r",
											" })\r",
											"\r",
											"pm.collectionVariables.set(\"username\", resp.split(\" \")[3]);\r",
											"pm.collectionVariables.set(\"user_id\", resp.split(\" \")[6]);\r",
											"\r",
											"console.log(resp.split(\" \")[3]); //username\r",
											"console.log(resp.split(\" \")[6]); //id\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"authorities\": [\r\n    \"ROLE_USER\"\r\n  ],\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{email_random}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}/users/",
									"host": [
										"{{base_URL}}{{api}}"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a comment - content length too long (FPW-268)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = pm.response.text();\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Proper Error Status appears\", function () {\r",
											"    pm.expect(jsonData.status).eqls(400);\r",
											"});\r",
											"pm.test(\"Proper Error appears\", function () {\r",
											"    pm.expect(jsonData.error).eqls(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Proper Error Message appears\", function () {\r",
											"    pm.expect(resp).contains(pm.collectionVariables.get(\"content_length_error\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var user=pm.collectionVariables.get(\"username\");\r",
											"var pass=pm.collectionVariables.get(\"password\");\r",
											"\r",
											"var login = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/authenticate', \r",
											"    header: {\r",
											"        'Content-Type': 'multipart/form-data', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: user },\r",
											"            { key: 'password', value: pass },\r",
											"            \r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    var createPost = {\r",
											"    method: 'POST', \r",
											"    url: 'http://localhost:8081/api/post/auth/creator', \r",
											"    header: {\r",
											"        'Content-Type': 'application/json', \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"    raw:  JSON.stringify(\r",
											"        {\r",
											"            \"content\": pm.collectionVariables.get(\"post_content\"),\r",
											"            \"picture\": pm.collectionVariables.get(\"picture_content\"),\r",
											"            \"public\": true\r",
											"        })\r",
											"\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(createPost, function (err, response){\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    }\r",
											"    else{\r",
											"\r",
											"        console.log(response.json());\r",
											"        pm.collectionVariables.set(\"postId\", response.json().postId);\r",
											"    }\r",
											"});\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function randomContentEdgeLimit(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue =1001;\r",
											"        maxValue = 1001;\r",
											"    }\r",
											"\r",
											"    if (!maxValue) {\r",
											"        maxValue = minValue;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue),\r",
											"        randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set('randomContentEdgeLimit', randomContentEdgeLimit());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"commentId\": 0,\r\n  \"content\": \"{{randomContentEdgeLimit}}\",\r\n  \"deletedConfirmed\": true,\r\n  \"postId\": {{postId}},\r\n  \"userId\": {{user_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}{{api}}{{comment}}/auth/creator",
									"host": [
										"{{base_URL}}{{api}}{{comment}}"
									],
									"path": [
										"auth",
										"creator"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// pm.test(\"Unsuccessful POST request\", function () {",
							"//     pm.expect(pm.response.code).to.be.oneOf([400, 401, 403, 404, 409]);",
							"// });",
							"if ([400, 401, 403, 404, 409].includes(pm.response.code)){",
							"    pm.test(\"Unsuccessful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 401, 403, 404, 409]);",
							"});",
							"} else {",
							"    console.log(\"Successful requets.\")",
							"}"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var moment = require('moment');",
					"pm.collectionVariables.set(\"CurrentDate\", moment().format());",
					"",
					"var moment = require('moment');",
					"var pastDate = pm.collectionVariables.replaceIn(\"{{$randomDatePast}}\")",
					"pastDate = moment(pastDate).format((\"YYYY-MM-DD\"));",
					"",
					"var moment = require('moment');",
					"var memberDate = pm.variables.replaceIn(\"{{$randomDatePast}}\")",
					"memberDate = moment(memberDate).format((\"DD/MM/YYYY\"));",
					"",
					"pm.collectionVariables.set(\"random_memberDate\", memberDate)",
					"pm.collectionVariables.set(\"random_birthDate\", pastDate)",
					"pm.collectionVariables.set(\"random_city\", _.random(1, 25))",
					"pm.collectionVariables.set(\"random_number\", _.random(1,10))",
					"",
					"//  const num = pm.variables.replaceIn('{{$randomInt}}') % 5 + 1;",
					"// pm.globals.set(\"random_city\", num);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"//var jsonData = pm.response.json();",
					"",
					"// if(pm.response.code === 200){",
					"//     pm.test(\"Status code is 200\", function () {",
					"//      pm.response.to.have.status(200);",
					"//  });",
					"// } else {",
					"//     pm.test(\"Status code is NOT 200\", function () {",
					"//     pm.response.to.not.have.status(200);",
					"// });",
					"   // console.log(\"An unexpected error occured: \");",
					"   // console.log(\"error status:\", jsonData.status);",
					"   // console.log(\"error message:\",jsonData.message);",
					"//}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "Happy Path Vars",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "username_random",
			"value": "\"{{$randomFirstName}}\"",
			"type": "string"
		},
		{
			"key": "email_random",
			"value": "{{$randomEmail}}",
			"type": "string"
		},
		{
			"key": "category_name",
			"value": "All",
			"type": "string"
		},
		{
			"key": "category_id",
			"value": "100",
			"type": "string"
		},
		{
			"key": "postId",
			"value": "",
			"type": "string"
		},
		{
			"key": "post_content",
			"value": "\"Automated post from Postman  {{CurrentDate}}\"",
			"type": "string"
		},
		{
			"key": "picture_content",
			"value": "\"No picture {{CurrentDate}}\"",
			"type": "string"
		},
		{
			"key": "comment_content",
			"value": "\"Automated comment from Postman {{CurrentDate}}\"",
			"type": "string"
		},
		{
			"key": "edit_post_content",
			"value": "\"My edited automated post from Postman {{CurrentDate}}\"",
			"type": "string"
		},
		{
			"key": "edited_comment_content",
			"value": "My edited automated comment from Postman {{CurrentDate}}",
			"type": "string"
		},
		{
			"key": "---------------------------------------------",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "admin_user",
			"value": "adminTeam",
			"type": "string"
		},
		{
			"key": "password",
			"value": "12345678",
			"type": "string"
		},
		{
			"key": "random_year",
			"value": "",
			"type": "string"
		},
		{
			"key": "login_cookie",
			"value": "",
			"type": "string"
		},
		{
			"key": "edited_picture_content",
			"value": "\"Edited: still no picture {{CurrentDate}}\"",
			"type": "string"
		},
		{
			"key": "skill_update",
			"value": "a",
			"type": "string"
		},
		{
			"key": "random_number",
			"value": "",
			"type": "string"
		},
		{
			"key": "random_city",
			"value": "",
			"type": "string"
		},
		{
			"key": "random_pastDate",
			"value": "",
			"type": "string"
		},
		{
			"key": "random_memberDate",
			"value": "",
			"type": "string"
		},
		{
			"key": "sex",
			"value": "MALE",
			"type": "string"
		},
		{
			"key": "comment_id",
			"value": ""
		},
		{
			"key": "skill_text",
			"value": "\"Skill from postman  {{CurrentDate}}\""
		},
		{
			"key": "skill_id",
			"value": ""
		},
		{
			"key": "random_birthDate",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "expertiseProfile_id",
			"value": ""
		},
		{
			"key": "CurrentDate",
			"value": ""
		},
		{
			"key": "usernameOne",
			"value": ""
		},
		{
			"key": "userOne_id",
			"value": ""
		},
		{
			"key": "usernameTwo",
			"value": ""
		},
		{
			"key": "userTwo_id",
			"value": ""
		},
		{
			"key": "connectID",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "admin_username",
			"value": ""
		},
		{
			"key": "admin_id",
			"value": ""
		},
		{
			"key": "randomContent",
			"value": ""
		},
		{
			"key": "randomStringNameEdgeCase",
			"value": ""
		},
		{
			"key": "randomIntNameEdgeCase",
			"value": ""
		},
		{
			"key": "randomPassTooShort",
			"value": ""
		},
		{
			"key": "randomContentEdgeLimit",
			"value": ""
		},
		{
			"key": "pass-error_msg",
			"value": ""
		},
		{
			"key": "username_duplicate_error",
			"value": ""
		},
		{
			"key": "username_error",
			"value": ""
		},
		{
			"key": "unauthorized_error",
			"value": ""
		},
		{
			"key": "content_length_error",
			"value": ""
		}
	]
}